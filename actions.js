const swaggerUiAssetPath = require("swagger-ui-dist").getAbsoluteFSPath();
const fs = require("node:fs");

module.exports = {
	generateDocs: {
		openapi: {
			// you can declare custom Path Item Object
			// which override autogenerated object from params
			// https://github.com/OAI/OpenAPI-Specification/blob/b748a884fa4571ffb6dd6ed9a4d20e38e41a878c/versions/3.0.3.md#path-item-object-example
			summary: "OpenAPI schema url",

			// you custom response
			// https://github.com/OAI/OpenAPI-Specification/blob/b748a884fa4571ffb6dd6ed9a4d20e38e41a878c/versions/3.0.3.md#response-object-examples
			responses: {
				200: {
					description: "",
					content: {
						"application/json": {
							schema: {
								$ref: "#/components/schemas/OpenAPIModel",
							},
						},
					},
				},
			},

			// you custom tag
			// https://github.com/OAI/OpenAPI-Specification/blob/b748a884fa4571ffb6dd6ed9a4d20e38e41a878c/versions/3.0.3.md#fixed-fields-8
			tags: ["openapi"],

			// components which attached to root of docx
			// https://github.com/OAI/OpenAPI-Specification/blob/b748a884fa4571ffb6dd6ed9a4d20e38e41a878c/versions/3.0.3.md#components-object
			components: {
				schemas: {
					// you custom schema
					// https://github.com/OAI/OpenAPI-Specification/blob/b748a884fa4571ffb6dd6ed9a4d20e38e41a878c/versions/3.0.3.md#models-with-polymorphism-support
					OpenAPIModel: {
						type: "object",
						properties: {
							openapi: {
								example: "3.0.3",
								type: "string",
								description: "OpenAPI version",
							},
							info: {
								type: "object",
								properties: {
									description: {
										type: "string",
									},
								},
							},
							tags: {
								type: "array",
								items: {
									type: "string",
								},
							},
						},
						required: ["openapi"],
					},
				},
			},
		},
		handler() {
			return this.generateSchema();
		},
	},
	assets: {
		openapi: {
			summary: "OpenAPI assets",
			description: "Return files from swagger-ui-dist folder",
		},
		params: {
			file: {
				type: "enum",
				values: [
					"swagger-ui.css",
					"swagger-ui.css.map",
					"swagger-ui-bundle.js",
					"swagger-ui-bundle.js.map",
					"swagger-ui-standalone-preset.js",
					"swagger-ui-standalone-preset.js.map",
				],
			},
		},
		handler(ctx) {
			if (ctx.params.file.indexOf(".css") > -1) {
				ctx.meta.$responseType = "text/css";
			} else if (ctx.params.file.indexOf(".js") > -1) {
				ctx.meta.$responseType = "text/javascript";
			} else {
				ctx.meta.$responseType = "application/octet-stream";
			}

			return fs.createReadStream(`${swaggerUiAssetPath}/${ctx.params.file}`);
		},
	},
	ui: {
		openapi: {
			summary: "OpenAPI ui",
			description: "You can provide any schema file in query param",
		},
		params: {
			url: { $$t: "Schema url", type: "string", optional: true },
		},
		handler(ctx) {
			ctx.meta.$responseType = "text/html; charset=utf-8";

			return `
      <html>
        <head>
           <title>OpenAPI UI</title>
           <link rel="stylesheet" href="${this.settings.assetsPath}/swagger-ui.css"/>
        </head>
        <body>

          <div id="swagger-ui">
            <p>Loading...</p>
            <noscript>If you see json, you need to update your moleculer-web to 0.8.0 and moleculer to 0.12</noscript>
          </div>

          <script src="${this.settings.assetsPath}/swagger-ui-bundle.js"></script>
          <script src="${this.settings.assetsPath}/swagger-ui-standalone-preset.js"></script>
          <script>
            window.onload = function() {
             SwaggerUIBundle({
               url: "${ctx.params.url || this.settings.schemaPath}",
               dom_id: '#swagger-ui',
               deepLinking: true,
               presets: [
                 SwaggerUIBundle.presets.apis,
                 SwaggerUIStandalonePreset,
               ],
               plugins: [
                 SwaggerUIBundle.plugins.DownloadUrl
               ],
               layout: "StandaloneLayout",
             });
            }
          </script>

        </body>
      </html>`;
		},
	},
};
